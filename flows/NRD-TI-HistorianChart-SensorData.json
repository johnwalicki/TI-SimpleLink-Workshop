[
    {
        "id": "b3607eb2.e5b4f",
        "type": "tab",
        "label": "Historical Chart",
        "disabled": false,
        "info": ""
    },
    {
        "id": "afe6cda4.28507",
        "type": "debug",
        "z": "b3607eb2.e5b4f",
        "name": "Line Chart data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 960,
        "y": 260,
        "wires": []
    },
    {
        "id": "4cdf79a0.37525",
        "type": "ui_chart",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "group": "a867c687.734768",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "mmWave Distance Historian Time Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "34196449.8e0ccc",
        "type": "cloudant in",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "cloudant": "",
        "database": "mmwave-london",
        "service": "",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "6e9efd50.aac314",
                "9af1e69d.7e59c8",
                "22681441.43bdd4"
            ]
        ]
    },
    {
        "id": "6e9efd50.aac314",
        "type": "debug",
        "z": "b3607eb2.e5b4f",
        "name": "Cloudant records",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 590,
        "y": 260,
        "wires": []
    },
    {
        "id": "f7233e0f.f09d48",
        "type": "ui_button",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "group": "cf6bae3a.87139",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Load IoT Sensor Data",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "34196449.8e0ccc"
            ]
        ]
    },
    {
        "id": "481d85ef.57d0fc",
        "type": "change",
        "z": "b3607eb2.e5b4f",
        "name": "Clear Chart",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 160,
        "wires": [
            [
                "4cdf79a0.37525",
                "b52be5d9.9b1048"
            ]
        ]
    },
    {
        "id": "7f8ad63b.ccd7d",
        "type": "comment",
        "z": "b3607eb2.e5b4f",
        "name": "Select Date Range",
        "info": "",
        "x": 270,
        "y": 340,
        "wires": []
    },
    {
        "id": "4f9fb666.ff13f8",
        "type": "ui_date_picker",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "label": "Start Date",
        "group": "cf6bae3a.87139",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "x": 430,
        "y": 380,
        "wires": [
            [
                "4b19755d.8e331c"
            ]
        ]
    },
    {
        "id": "f33c80c6.6ba13",
        "type": "ui_date_picker",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "label": "End Date",
        "group": "cf6bae3a.87139",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "x": 420,
        "y": 420,
        "wires": [
            [
                "42758ee9.031e7"
            ]
        ]
    },
    {
        "id": "52de5c26.b60744",
        "type": "debug",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "3ff87790.2ac1f8",
        "type": "debug",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 830,
        "y": 420,
        "wires": []
    },
    {
        "id": "dc1ee5a0.5f0fb",
        "type": "change",
        "z": "b3607eb2.e5b4f",
        "name": "Start Date",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1572566401000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 380,
        "wires": [
            [
                "4f9fb666.ff13f8"
            ]
        ]
    },
    {
        "id": "53664491.1c8fcc",
        "type": "change",
        "z": "b3607eb2.e5b4f",
        "name": "End Date",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1577750401000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 420,
        "wires": [
            [
                "f33c80c6.6ba13"
            ]
        ]
    },
    {
        "id": "4b19755d.8e331c",
        "type": "change",
        "z": "b3607eb2.e5b4f",
        "name": "Start Time Range",
        "rules": [
            {
                "t": "set",
                "p": "start-time",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 380,
        "wires": [
            [
                "52de5c26.b60744"
            ]
        ]
    },
    {
        "id": "42758ee9.031e7",
        "type": "change",
        "z": "b3607eb2.e5b4f",
        "name": "End Time Range",
        "rules": [
            {
                "t": "set",
                "p": "end-time",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 420,
        "wires": [
            [
                "3ff87790.2ac1f8"
            ]
        ]
    },
    {
        "id": "a972ea79.278e6",
        "type": "inject",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "53664491.1c8fcc",
                "dc1ee5a0.5f0fb"
            ]
        ]
    },
    {
        "id": "7f4da8bf.06d468",
        "type": "ui_button",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "group": "cf6bae3a.87139",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear Chart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "481d85ef.57d0fc"
            ]
        ]
    },
    {
        "id": "9af1e69d.7e59c8",
        "type": "function",
        "z": "b3607eb2.e5b4f",
        "name": "Create a Bar Chart Array for Chart.js",
        "func": "// This function reformats the timeseries data into an array that \n// Chart.js (See http://www.chartjs.org/ ) will plot\n// The node-red-dashboard Chart node uses Chart.js \n\nvar starttime = flow.get(\"start-time\");\nvar endtime = flow.get(\"end-time\");\n\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\n// Now we need to sort on the time so that we give the Chart node an array in time order\n// Bar Charts don't have a time scale on the x axis so sort by time first.\nvar DistanceData = msg.payload ;\nDistanceData.sort(function sortNumber(a,b) { return a.time - b.time; });\n\n// The Array has this structure, inserting the first element as a template.\nvar ChartData = [ {\"series\":[\"Data\"],\n                   \"data\":[DistanceData[0].distance],\n                   \"labels\":[\"Data\"]}];\n\n// Start at 1 because we've already added element 0 in the initial array definition\nfor( var i=1; i < DistanceData.length; i++ ) {\n    if( (DistanceData[i].time >= starttime) && (DistanceData[i].time <= endtime) ) {\n       ChartData[0].data.push( DistanceData[i].distance );\n    }\n}\n\nmsg.payload = ChartData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "a774879a.c0526",
                "b52be5d9.9b1048"
            ]
        ]
    },
    {
        "id": "b52be5d9.9b1048",
        "type": "ui_chart",
        "z": "b3607eb2.e5b4f",
        "name": "",
        "group": "a867c687.734768",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "mmWave Distance Historian Height Chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1040,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "22681441.43bdd4",
        "type": "function",
        "z": "b3607eb2.e5b4f",
        "name": "Create a Chart Array for Chart.js",
        "func": "// This function reformats the timeseries data into an array that \n// Chart.js (See http://www.chartjs.org/ ) will plot\n// The node-red-dashboard Chart node uses Chart.js\n\nvar starttime = flow.get(\"start-time\");\nvar endtime = flow.get(\"end-time\");\n\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\n// The Array has this structure, inserting the first element as a template.\nvar ChartData = [ {\"series\":[\"Data\"],\n                   \"data\":[[{\"x\":msg.payload[0].time,\"y\":msg.payload[0].distance}]],\n                   \"labels\":[\"Data\"]}];\n\n// Start at 1 because we've already added element 0 in the initial array definition\nfor( var i=1; i < msg.payload.length; i++ ) {\n    if( (msg.payload[i].time >= starttime) && (msg.payload[i].time <= endtime) ) {\n        // This temperature reading is within the Date Range\n        ChartData[0].data[0].push( { \"x\":msg.payload[i].time,\"y\":msg.payload[i].distance } );\n    }    \n}\n// Now we need to sort on the time so that we give the Chart node an array in time order\nChartData[0].data[0].sort(function sortNumber(a,b) { return a.x - b.x; });\n\nmsg.payload = ChartData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 220,
        "wires": [
            [
                "4cdf79a0.37525",
                "afe6cda4.28507"
            ]
        ]
    },
    {
        "id": "a774879a.c0526",
        "type": "debug",
        "z": "b3607eb2.e5b4f",
        "name": "Bar Chart data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 960,
        "y": 60,
        "wires": []
    },
    {
        "id": "a867c687.734768",
        "type": "ui_group",
        "z": "",
        "name": "Historical Data",
        "tab": "6135a402.b2181c",
        "order": 1,
        "disp": true,
        "width": "18"
    },
    {
        "id": "cf6bae3a.87139",
        "type": "ui_group",
        "z": "",
        "name": "Chart Controls",
        "tab": "6135a402.b2181c",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "6135a402.b2181c",
        "type": "ui_tab",
        "z": "",
        "name": "Original Historical Data",
        "icon": "fa-area-chart",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]
